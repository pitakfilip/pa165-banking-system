openapi: 3.0.1
info:
  title: Pa165 Project Banking Application Account Query
  description: |
    Hand-made OpenAPI document.
  version: 1.0.0
servers:
  - url: "http://localhost:8080"
tags:
  - name: CustomerService
    description: Service to be used by customer of bank
  - name: SystemService
    description: Service to be used by other services of bank
  - name: EmployeeService
    description: Service to be used by employees of bank
components:
  schemas:
    Transaction:
      title: A transaction
      description: A object representing one transaction
      properties:
        transactionType:
          type: string
          enum: [ WITHDRAW, DEPOSIT, CREDIT, CROSS_ACCOUNT_PAYMENT, REFUND ]
          description: type of transaction
        amount:
          type: number
          description: amount of money in transaction
          example: 10
        date:
          type: string
          description: time when the transaction happened
          format: date-time
        processId:
          type: string
          description: id of transaction issued by transaction processor

    Balance:
      title: A balance
      description: Balance object keeping balance of ones account as well as all transactions that led to it.
      required:
        - id
      properties:
        id:
          type: string
          description: id of account with this balance
          example: id1
        amount:
          type: number
          description: balance of account right now
          example: 10
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
          description: all transactions of this account in list

    TransactionStatistics:
      title: statistics about one type of transaction
      properties:
        transactionType:
          type: string
          enum: [ WITHDRAW, DEPOSIT, CREDIT, CROSS_ACCOUNT_PAYMENT, REFUND ]
          description: type of transaction
          nullable: true
        amountIn:
          type: number
          description: amount of money got by this type of transactions
          example: 1002
        amountOut:
          type: number
          description: amount of money spent by this type of transactions
          example: 1184
        timesIn:
          type: number
          description: number of times this type of transaction was used to get money
          example: 12
        timesOut:
          type: number
          description: number of times this type of transaction was used to spend money
          example: 13

    TransactionsReport:
      title: statistical report about one account
      properties:
        totalAmount:
          $ref: '#/components/schemas/TransactionStatistics'
        depositAmount:
          $ref: '#/components/schemas/TransactionStatistics'
        withdrawalAmount:
          $ref: '#/components/schemas/TransactionStatistics'
        crossAccountAmount:
          $ref: '#/components/schemas/TransactionStatistics'
        creditAmount:
          $ref: '#/components/schemas/TransactionStatistics'

paths:
  /balance/new:
    post:
      tags:
        - SystemService
      summary: creates a balance
      operationId: createBalance
      parameters:
        - { name: id, in: query, required: true, schema: { type: string }, description: "id of account" }
      responses:
        "201":
          description: OK

  /balance/add:
    post:
      tags:
        - SystemService
      summary: adds transaction to existing balance
      operationId: addTransactionToBalance
      parameters:
        - { name: id, in: query, required: true, schema: { type: string }, description: "id of account" }
        - { name: amount, in: query, required: true, schema: { type: number }, description: "amount of money in transaction" }
        - { name: processId, in: query, required: true, schema: { type: string }, description: "id of process which this transaction is part of" }
        - { name: type, in: query, required: true, schema: { type: string, enum: [ WITHDRAW, DEPOSIT, CREDIT, CROSS_ACCOUNT_PAYMENT, REFUND ] }, description: "type  of transaction" }
      responses:
        "200":
          description: OK
        "400":
          description: NOK
          content:
            application/json:
              schema:
                type: string
                description: reason of failure

  /balance/status:
    get:
      tags:
        - CustomerService
        - SystemService
      summary: returns account balance status
      operationId: getBalance
      parameters:
        - { name: id, in: query, required: true, schema: { type: string }, description: "id of account" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: number
                description: accounts balance
        "400":
          description: NOK
          content:
            application/json:
              schema:
                type: string
                description: reason of failure

  /balance/transactions:
    get:
      tags:
        - CustomerService
        - SystemService
      summary: returns transactions of specific account for specific time interval
      operationId: getTransactions
      parameters:
        - { name: id, in: query, required: true, schema: { type: string }, description: "id of account" }
        - { name: beginning, in: query, required: true, schema: { type: string, format: date }, description: "date from which onwards the transactions happened" }
        - { name: end, in: query, required: true, schema: { type: string, format: date }, description: "date before which wanted transactions happened" }
        - { name: minAmount, in: query, required: false, schema: { type: number }, description: "minimal amount of money included in transaction to be reported" }
        - { name: maxAmount, in: query, required: false, schema: { type: number }, description: "maximal amount of money included in transaction to be reported" }
        - { name: type, in: query, required: false, schema: { type: string, enum: [ WITHDRAW, DEPOSIT, CREDIT, CROSS_ACCOUNT_PAYMENT, REFUND ] }, description: "type of transactiops to be included in returned ones" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "400":
          description: NOK
          content:
            application/json:
              schema:
                type: string
                description: reason of failure

  /balance/alltransactions:
    get:
      tags:
        - EmployeeService
      summary: returns all transactions for specific time interval
      operationId: getAllTransactions
      parameters:
        - { name: beginning, in: query, required: true, schema: { type: string, format: date }, description: "date from which onwards the transactions happened" }
        - { name: end, in: query, required: true, schema: { type: string, format: date }, description: "date before which wanted transactions happened" }
        - { name: minAmount, in: query, required: false, schema: { type: number }, description: "minimal amount of money included in transaction to be reported" }
        - { name: maxAmount, in: query, required: false, schema: { type: number }, description: "maximal amount of money included in transaction to be reported" }
        - { name: type, in: query, required: false, schema: { type: string, enum: [ WITHDRAW, DEPOSIT, CREDIT, CROSS_ACCOUNT_PAYMENT, REFUND ] }, description: "type of transactiops to be included in returned ones" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "400":
          description: NOK
          content:
            application/json:
              schema:
                type: string
                description: reason of failure

  /balance/account/report:
    get:
      tags:
        - EmployeeService
      summary: creates a report of spending statistics for one user
      operationId: createReport
      parameters:
        - { name: id, in: query, required: true, schema: { type: string }, description: "id of account" }
        - { name: beginning, in: query, required: true, schema: { type: string, format: date }, description: "date from which onwards the transactions wanted in report happened" }
        - { name: end, in: query, required: true, schema: { type: string, format: date }, description: "date before which wanted transactions wanted in report happened" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsReport'
        "400":
          description: NOK
          content:
            application/json:
              schema:
                type: string
                description: reason of failure
